[build-system]
requires = ["setuptools>=61.2", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "d2r-api"
dynamic = ["version", "dependencies", "optional-dependencies"]
requires-python = ">=3.13"
authors = [{ name = "D2R-Team", email = "climate@rub.de" }]
maintainers = [{ name = "Jonas Kittner", email = "jonas.kittner@rub.de" }]
description = "API for the Data2Resilience project providing measurements from the station network"
readme = "README.md"
license = "MIT"
license-files = ["LICENSE*"]

[project.urls]
Homepage = "https://data2resilience.de"
Documentation = "https://api.data2resilience.de/docs"
Repository = "https://github.com/RUBclim/d2r-api"

[tool.setuptools_scm]

[tool.setuptools]
packages = ["app"]
include-package-data = false

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }
optional-dependencies = { dev = { file = ["requirements-dev.txt"] } }

[tool.coverage.report]
fail_under = 98
exclude_also = [
    # needed because of: https://github.com/nedbat/coveragepy/issues/1563
    "raise NotImplementedError",
    "case _:\\n\\s*raise NotImplementedError",
]

[tool.coverage.run]
parallel = true
plugins = ["covdefaults"]
concurrency = ["greenlet", "thread"]
omit = ["app/alembic"]

[tool.autopep8]
max_line_length = 88

[tool.mypy]
mypy_path = "stubs"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.tox]
runner = "uv-venv-runner"
env_list = ["py313", "pre-commit", "mypy"]

[tool.tox.env_run_base]
deps = [
    "-rrequirements-dev.txt",
    "-rrequirements.txt",
]
setenv = { DB_PROVIDER = "postgresql+psycopg", DB_HOST = "localhost", TC_DRIVER_PROVIDER = "postgresql", TC_DATABASE_HOST = "localhost", TC_DATABASE_NAME = "terracotta", TC_RESAMPLING_METHOD = "average", TC_REPROJECTION_METHOD = "average", PGPORT = "5432", POSTGRES_USER = "dbuser", POSTGRES_PASSWORD = "test", POSTGRES_DB = "test_db", CELERY_BROKER_URL = "localhost", QUEUE_SOFT_TIME_LIMIT = "123", ELEMENT_API_KEY = "deadbeef" }
commands = [
    ["coverage", "erase"],
    ["coverage", "run", "-m", "pytest", { replace = "posargs", default = [], extend = true }],
    ["coverage", "combine"],
    ["coverage", "report"],
]

[tool.tox.env.prime_db]
allowlist_externals = ["timeout"]
commands = [
    ["timeout", "--preserve-status", "--signal=SIGINT", "10s", "uvicorn", "app.main:app"],
]

[tool.tox.env.pre-commit]
skip_install = true
deps = [
    "-rrequirements-dev.txt",
    "-rrequirements.txt",
    "pre-commit",
]
commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure"]]

[tool.tox.env.mypy]
deps = [
    "-rrequirements-dev.txt",
    "-rrequirements.txt",
    "mypy",
]
commands = [
    ["mypy", "app", "--ignore-missing-imports"],
    ["mypy", "tests", "--ignore-missing-imports"],
]

[tool.tox.env.docs]
setenv = { DB_PROVIDER = "postgresql+psycopg", DB_HOST = "localhost", TC_DRIVER_PROVIDER = "postgresql", TC_DATABASE_HOST = "localhost", TC_DATABASE_NAME = "terracotta", TC_RESAMPLING_METHOD = "average", TC_REPROJECTION_METHOD = "average", PGPORT = "5432", POSTGRES_USER = "dbuser", POSTGRES_PASSWORD = "test", POSTGRES_DB = "test_db", CELERY_BROKER_URL = "localhost", QUEUE_SOFT_TIME_LIMIT = "123", ELEMENT_API_KEY = "deadbeef" }
deps = [
    "-rrequirements-dev.txt",
    "-rrequirements.txt",
]
commands = [
    ["sphinx-build", "-b", "html", "docs/src", "docs/_build/html"],
]

[tool.tox.env.latex_docs]
setenv = { DB_PROVIDER = "postgresql+psycopg", DB_HOST = "localhost", TC_DRIVER_PROVIDER = "postgresql", TC_DATABASE_HOST = "localhost", TC_DATABASE_NAME = "terracotta", TC_RESAMPLING_METHOD = "average", TC_REPROJECTION_METHOD = "average", PGPORT = "5432", POSTGRES_USER = "dbuser", POSTGRES_PASSWORD = "test", POSTGRES_DB = "test_db", CELERY_BROKER_URL = "localhost", QUEUE_SOFT_TIME_LIMIT = "123", ELEMENT_API_KEY = "deadbeef" }
allowlist_externals = ["./bin/make_latex"]
deps = [
    "-rrequirements-dev.txt",
    "-rrequirements.txt",
]
commands = [["./bin/make_latex"]]
