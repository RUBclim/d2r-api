# redirect all http request to https
server {
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    http2 on;
    server_name dashboard.data2resilience.de;
    ssl_certificate /etc/nginx/certs/d2r_api_cert.pem;
    ssl_certificate_key /etc/nginx/certs/d2r_api_key.key;

    location / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_redirect off;
        proxy_buffering off;
        proxy_pass http://dashboard:3000;
    }
}

# see: https://www.uvicorn.org/deployment/#running-behind-nginx
server {
    listen 443 ssl;
    http2 on;
    server_name api.data2resilience.de;
    ssl_certificate /etc/nginx/certs/d2r_api_cert.pem;
    ssl_certificate_key /etc/nginx/certs/d2r_api_key.key;

    location / {
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_redirect off;
        proxy_buffering off;
        proxy_pass http://app:5000;
    }
    location /tms/ {
        # route to the terracotta server api
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Prefix /tms;
        proxy_redirect off;
        proxy_pass http://terracotta-server:5000/;
    }
    location ~* ^/tms/.*\.png$ {
        rewrite ^/tms(/.*)$ $1 break;
        # route to the terracotta server api
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Prefix /tms;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass http://terracotta-server:5000;

        # cache the tiles
        proxy_cache tile_cache;
        proxy_cache_methods GET HEAD;
        # if the upstream is down, we want to serve the cached tiles
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        # we need to ignore those headers to effectively cache the tiles. There
        # cannot be any changes if the params and args are the same.
        proxy_ignore_headers Cache-Control;
        proxy_cache_valid 200 302 301 356d;
        # show if we hit the cache or not
        add_header X-Cache-Status $upstream_cache_status;
        # we wait for the cache to be populated, to serve the 2nd request from there
        proxy_cache_lock on;
        # if the lock is too long, reach out to the upstream
        proxy_cache_lock_timeout 2s;
        # ask the user to cache the tiles for 1 hour
        proxy_hide_header Cache-Control;
        add_header Cache-Control "public, max-age=3600, stale-while-revalidate=3600, stale-if-error=3600";
    }
    # disable some endpoints we don't use
    location ~ ^/tms/(compute|rgb) {
        deny all;
    }
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}
